# -*- coding: utf-8 -*-
"""Inventory optimization problem using Q-Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D6s0mQNRn2mYTh5U0KvLX0UD6NJdNEkz
"""

'''
1)consumption rate(demand)
2)current inventory level
3)0,1 order or not
'''

import numpy as np

MAX_PRODUCT_LEVEL=10
MAX_ORER_LEVEL=MAX_PRODUCT_LEVEL
MAX_CONSUMPTION=30
NUM_ACTION=2 # 0:NO ORDER AND 1:ORDER
NUM_EPISOD=100
NUM_STEP=50
LEAD_TIME=2
ALPH=0.1 #LEARNING RATE
GAMMA=0.9 #DISCOUNT FACTOR
EPSILON=0.1#EXPLORATION RATE
LAMDA=MAX_PRODUCT_LEVEL/2

#Initialize q-table
Q=np.zeros((MAX_PRODUCT_LEVEL+1,NUM_ACTION))

#main loop
for episode in range(NUM_EPISOD):
  #define product reorder table
  product_level=[] #track the product level over time for consumption
  order_time=[] #track order time over time
  inventory_level=[] #track the inventory level
  #reset the product level and append to inventory level
  product_level=np.random.randint(1,MAX_PRODUCT_LEVEL)
  inventory_level.append(MAX_PRODUCT_LEVEL-product_level)

  #loop over steps
  for tm in range(NUM_STEP):
    #choose the action based on epilon greedy policy
    if np.random.uniform(0,1)<EPSILON:
      action = np.random.randint(NUM_ACTION)
    else:
      action=np.argmax(Q[product_level,:])

    if action ==1:
      order_time.append(tm)
    if (tm-LEAD_TIME) in order_time:
      product_level = MAX_PRODUCT_LEVEL
    else:
      consumption = np.random.poisson(LAMDA,1)
      product_level=max(0,product_level-consumption)

    #reward (penalty)
    if product_level==0:
      reward=-MAX_CONSUMPTION
    else:
      reward=-consumption

    #update Q value using bellman equation
    next_state=max(0,product_level)
    Q[product_level,action]+=ALPH*(reward+GAMMA*np.max(Q[next_state,1])-Q[product_level,action])

#determin the best action based on the Q-table
optimal_action=np.argmax(Q,axis=1)

#print the policy
print('optimal policy (reorder time) for the product:')
for product_level,action in enumerate(optimal_action):
  print("product level: {} ----reorder action {}".format(product_level,action))

